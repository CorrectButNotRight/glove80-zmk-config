
/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2022 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
/* Include all behaviour includes needed by system behaviors/macros */
#include <dt-bindings/zmk/outputs.h>

/* Include behaviour includes needed by key binds - automatically generated */
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>

#define DEFAULT_LAYER 0
#define QWERTY_LAYER 1
#define LOWER_LAYER 2
#define MAGIC_LAYER 3

#define MO_TOG(layer) &mo_tog layer layer
#define KP_SK(key) &kp_sk key key
#define KP_SKQ(key) &kp_skq key key

/ {
    /* Glove80 system behavior & macros */
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        lower: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LOWER_LAYER>, <&tog LOWER_LAYER>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };
    };

    macros {
        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
    };

    macros {
        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
    };

    macros {
        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
    };

    macros {
        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };

    magic: magic_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "MAGIC_HOLD_TAP";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <200>;
        bindings = <&mo>, <&rgb_ug_status_macro>;
    };

    /* Custom Defined Behaviors */
    mo_tog: behavior_mo_tog {
        compatible = "zmk,behavior-hold-tap";
        label = "mo_tog";
        #binding-cells = <2>;
        flavor = "hold-preferred";
        tapping-term-ms = <200>;
        bindings = <&mo>, <&tog>;
    };

    skq: sticky_key_quick_release {
        compatible = "zmk,behavior-sticky-key";
        label = "STICKY_KEY_QUICK_RELEASE";
        #binding-cells = <1>;
        bindings = <&kp>;
        release-after-ms = <1000>;
        quick-release;
    };

    kp_sk: behavior_kp_sk {
        compatible = "zmk,behavior-hold-tap";
        label = "kp_sk";
        #binding-cells = <2>;
        flavor = "hold-preferred";
        tapping-term-ms = <200>;
        bindings = <&kp>, <&sk>;
    };

    kp_skq: behavior_kp_skq {
        compatible = "zmk,behavior-hold-tap";
        label = "kp_skq";
        #binding-cells = <2>;
        flavor = "hold-preferred";
        tapping-term-ms = <200>;
        bindings = <&kp>, <&skq>;
    };

    /* Automatically generated keymap */
    keymap {
        compatible = "zmk,keymap";


        layer_Base {
            bindings = <
               &kp F1    &kp F2   &kp F3    &kp F4     &kp F5                                                                                                                        &kp F6     &kp F7   &kp F10   &kp F11    &kp F12
               &kp N0    &kp N1   &kp N2  &kp LPAR   &kp LBRC  &kp PIPE                                                                                                 &kp AMPS  &kp EQUAL  &kp UNDER  &kp STAR  &kp DLLR  &kp MINUS
              &kp TAB     &kp Q    &kp W     &kp F      &kp P     &kp B                                                                                                    &kp J      &kp L      &kp U     &kp Y  &kp SEMI   &kp BSLH
              &kp ESC     &kp A    &kp R     &kp S      &kp T     &kp G                                                                                                    &kp M      &kp N      &kp E     &kp I     &kp O    &kp SQT
            &kp GRAVE     &kp Z    &kp X     &kp C      &kp D     &kp V  KP_SKQ(LSHFT)  KP_SK(LCTRL)          KP_SK(LGUI)          KP_SK(RGUI)  &kp TAB  KP_SKQ(RSHFT)     &kp K      &kp H  &kp COMMA   &kp DOT  &kp FSLH  &kp PG_UP
 &magic MAGIC_LAYER 0  &kp HOME  &kp END  &kp LEFT  &kp RIGHT                &kp SPACE   KP_SK(LALT)  MO_TOG(LOWER_LAYER)  MO_TOG(LOWER_LAYER)  &kp RET       &kp BSPC               &kp UP   &kp DOWN  &kp LBKT  &kp RBKT  &kp PG_DN
            >;
        };

        layer_Qwerty {
            bindings = <
               &trans   &trans   &trans    &trans     &trans                                                                 &trans     &trans    &trans    &trans     &trans
            &kp EQUAL    &kp N1   &kp N2   &kp N3     &kp N4  &kp N5                                                 &kp N6  &kp N7     &kp N8    &kp N9    &kp N0  &kp MINUS
               &trans    &kp Q    &kp W     &kp E      &kp R   &kp T                                                  &kp Y   &kp U      &kp I     &kp O     &kp P   &kp BSLH
               &trans    &kp A    &kp S     &kp D      &kp F   &kp G                                                  &kp H   &kp J      &kp K     &kp L  &kp SEMI    &kp SQT
               &trans    &kp Z    &kp X     &kp C      &kp V   &kp B  &trans  &trans  &trans  &trans  &trans  &trans  &kp N   &kp M  &kp COMMA   &kp DOT  &kp FSLH     &trans
 &magic MAGIC_LAYER 0   &trans   &trans    &trans     &trans          &trans  &trans  &trans  &trans  &trans  &trans          &trans    &trans    &trans    &trans     &trans
            >;
        };

        layer_Lower {
            bindings = <
         &kp C_BRI_DN  &kp C_BRI_UP  &kp C_PREV  &kp C_NEXT  &kp C_PP                                                                                                  &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP         &none  &kp PAUSE_BREAK
    &to DEFAULT_LAYER        &kp N1      &kp N2      &kp N3    &kp N4     &kp N5                                                                               &kp N6      &kp N7        &kp N8        &kp N9        &kp N0        &kp PSCRN
     &to QWERTY_LAYER         &none   &kp CARET    &kp RPAR  &kp RBRC      &none                                                                         &kp KP_EQUAL   &kp KP_N7     &kp KP_N8     &kp KP_N9  &kp KP_MINUS   &kp SCROLLLOCK
               &trans      &kp EXCL      &kp AT    &kp HASH  &kp DLLR  &kp PRCNT                                                                         &kp KP_SLASH   &kp KP_N4     &kp KP_N5     &kp KP_N6   &kp KP_PLUS       &kp KP_NUM
               &trans     &kp K_APP   &kp TILDE   &kp MINUS  &kp BSLH    &kp DEL  &trans  &trans            &trans            &trans  &trans  &trans  &kp KP_MULTIPLY   &kp KP_N1     &kp KP_N2     &kp KP_N3  &kp KP_ENTER         &kp HOME
 &magic MAGIC_LAYER 0      &kp CAPS     &kp INS      &kp F8    &kp F9             &trans  &trans  &tog LOWER_LAYER  &tog LOWER_LAYER  &trans  &trans                    &kp KP_N0     &kp KP_N0    &kp KP_DOT  &kp KP_ENTER          &kp END
            >;
        };

        layer_Magic {
            bindings = <
  &bt BT_CLR            &none            &none            &none            &none                                                                                  &none   &none   &none   &none  &bt BT_CLR_ALL
       &none            &none            &none            &none            &none            &none                                                         &none   &none   &none   &none   &none           &none
       &none  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                         &none   &none   &none   &none   &none           &none
 &bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                         &none   &none   &none   &none   &none     &bootloader
      &reset            &none            &none            &none            &none            &none   &bt_2   &bt_3         &none   &none   &none   &none   &none   &none   &none   &none   &none          &reset
       &none            &none            &none            &none            &none                    &bt_0   &bt_1  &out OUT_USB   &none   &none   &none           &none   &none   &none   &none           &none
            >;
        };

    };
};
