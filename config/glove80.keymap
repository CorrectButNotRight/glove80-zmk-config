
/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2022 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
/* Include all behaviour includes needed by system behaviors/macros */
#include <dt-bindings/zmk/outputs.h>

/* Include behaviour includes needed by key binds - automatically generated */
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>


/ {
    /* Glove80 system behavior & macros */
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        lower: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 1>, <&to 1>;
        };
    };
};

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
};

/ {
    magic: magic_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "MAGIC_HOLD_TAP";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <200>;
        bindings = <&mo>, <&rgb_ug_status_macro>;
    };
};

    /* Custom Defined Behaviors */
/ {
    #define LYBAS 0
    #define LYGAM 1
    #define LYPAD 2
    #define LYLOW 3
    #define LYLYR 4
    #define LYMAG 5
    #define TD_TERM 200
    #define HT_TERM 200
    #define COMBO_TIME 50
    #define FAST_WAIT 1
    #define FAST_TAP 10

    #define TD_SHIFT_MOD(name, key) TD_DEFINE(name, <&kp key>, <&kp LS(key)>)
    #define TD_DEFINE(name, beh1, beh2) TD_DEFINE_1(td_##name, tap_##name, beh1, beh2)
    #define TD_DEFINE_1(shortname, longname, beh1, beh2) shortname: longname { \
        compatible = "zmk,behavior-tap-dance"; \
        label = #shortname; \
        #binding-cells = <0>; \
        tapping-term-ms = <TD_TERM>; \
        bindings = beh1, beh2; \
    };
    #define FAST_SYM(name, key) ZMK_MACRO(fast_##name, \
        wait-ms = <FAST_WAIT>; \
        tap-ms = <FAST_TAP>; \
        bindings = <&kp key>; \
    )
    #define HT_DEFINE(name, beh1, beh2) HT_DEFINE_1(ht_##name, behavior_ht_##name, beh1, beh2)
    #define HT_DEFINE_1(shortname, longname, beh1, beh2) \
        shortname: longname { \
            compatible = "zmk,behavior-hold-tap"; \
            label = #shortname; \
            #binding-cells = <2>; \
            flavor = "hold-preferred"; \
            tapping-term-ms = <HT_TERM>; \
            quick-tap-ms = <100>; \
            bindings = beh1, beh2; \
        };

    skq: sticky_key_quick_release {
        compatible = "zmk,behavior-sticky-key";
        label = "STICKY_KEY_QUICK_RELEASE";
        #binding-cells = <1>;
        bindings = <&kp>;
        release-after-ms = <1000>;
        quick-release;
        ignore-modifiers;
    };

    slpar: shift_lpar {
        compatible = "zmk,behavior-mod-morph";
        label = "SHIFT_LPAR";
        #binding-cells = <0>;
        bindings = <&kp LPAR>, <&kp RPAR>;
        mods = <(MOD_RSFT)>;
    };

    srpar: shift_rpar {
        compatible = "zmk,behavior-mod-morph";
        label = "SHIFT_RPAR";
        #binding-cells = <0>;
        bindings = <&kp RPAR>, <&kp LPAR>;
        mods = <(MOD_LSFT)>;
    };

    TD_SHIFT_MOD(gui, LGUI)
    TD_SHIFT_MOD(rgui, LGUI)
    TD_SHIFT_MOD(ctrl, LCTRL)
    TD_SHIFT_MOD(rctrl, RCTRL)
    TD_SHIFT_MOD(alt, LALT)
    TD_SHIFT_MOD(ralt, RALT)
    TD_DEFINE(caps_word, <&kp RSHFT>, <&caps_word>)
    TD_DEFINE(caps_lock, <&kp RSHFT>, <&kp CAPS>)
    TD_DEFINE(alt_sgui, <&kp LALT>, <&kp LS(LGUI)>)
    TD_DEFINE(rshft_lower, <&kp RSHFT>, <&mo 4>)
    FAST_SYM(lbkt, LBKT)
    FAST_SYM(rbkt, RBKT)
    FAST_SYM(lbrc, LBRC)
    FAST_SYM(rbrc, RBRC)
    FAST_SYM(lpar, LPAR)
    FAST_SYM(rpar, RPAR)
    FAST_SYM(equal, EQUAL)
    FAST_SYM(plus, PLUS)
    FAST_SYM(under, UNDER)
    FAST_SYM(minus, MINUS)
    FAST_SYM(bslh, BSLH)
    FAST_SYM(pipe, PIPE)
    FAST_SYM(grave, GRAVE)
    FAST_SYM(tilde, TILDE)
    FAST_SYM(sqt, SQT)
    FAST_SYM(dqt, DQT)
    HT_DEFINE(kp, <&kp>, <&kp>)
    HT_DEFINE(mo, <&mo>, <&kp>)
    HT_DEFINE(tog, <&kp>, <&tog>)
    HT_DEFINE(kp_sl, <&kp>, <&sl>)
    HT_DEFINE(skq, <&kp>, <&skq>)
    HT_DEFINE(mo_skq, <&mo>, <&skq>)
    HT_DEFINE(mo_sl, <&mo>, <&sl>)
    HT_DEFINE(mo_repeat, <&mo>, <&key_repeat>)
    HT_DEFINE(mo_tog, <&mo>, <&tog>)
    HT_DEFINE(lpar_cadet, <&kp>, <&slpar>)
    HT_DEFINE(rpar_cadet, <&kp>, <&srpar>)

    ZMK_MACRO(keypad_space,
        wait-ms = <FAST_WAIT>;
        tap-ms = <FAST_TAP>;
        bindings = <&kp SPACE>, <&tog LYPAD>;
    )
    ZMK_MACRO(keypad_enter,
        wait-ms = <FAST_WAIT>;
        tap-ms = <FAST_TAP>;
        bindings = <&kp ENTER>, <&tog LYPAD>;
    )
    ZMK_MACRO(keypad_tab,
        wait-ms = <FAST_WAIT>;
        tap-ms = <FAST_TAP>;
        bindings = <&kp TAB>, <&tog LYPAD>;
    )
    ZMK_MACRO(keypad_stab,
        wait-ms = <FAST_WAIT>;
        tap-ms = <FAST_TAP>;
        bindings = <&kp LS(TAB)>, <&tog LYPAD>;
    )
    ZMK_MACRO(keypad_esc,
        wait-ms = <FAST_WAIT>;
        tap-ms = <FAST_TAP>;
        bindings = <&kp ESC>, <&tog LYPAD>;
    )

    td_layers: tap_dance_layers {
        compatible = "zmk,behavior-tap-dance";
        label = "td_layers";
        #binding-cells = <0>;
        tapping-term-ms = <TD_TERM>;
        bindings = <&tog LYPAD>, <&tog LYGAM>;
    };

    captab: caps_tab {
        compatible = "zmk,behavior-mod-morph";
        label = "CAPS_TAB";
        #binding-cells = <0>;
        bindings = <&kp CAPS>, <&kp TAB>;
        mods = <(MOD_LSFT|MOD_RSFT|MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT|MOD_LGUI|MOD_RGUI)>;
        keep-mods = <(MOD_LSFT|MOD_RSFT|MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT|MOD_LGUI|MOD_RGUI)>;
    };

    capesc: caps_esc {
        compatible = "zmk,behavior-mod-morph";
        label = "CAPS_ESC";
        #binding-cells = <0>;
        bindings = <&kp ESC>, <&kp CAPS>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    n8lpar: eight_lpar {
        compatible = "zmk,behavior-mod-morph";
        label = "EIGHT_LPAR";
        #binding-cells = <0>;
        bindings = <&kp N8>, <&kp LPAR>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    n9rpar: nine_rpar {
        compatible = "zmk,behavior-mod-morph";
        label = "NINE_RPAR";
        #binding-cells = <0>;
        bindings = <&kp N9>, <&kp RPAR>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    n0astrk: zero_astrk {
        compatible = "zmk,behavior-mod-morph";
        label = "ZERO_ASTRK";
        #binding-cells = <0>;
        bindings = <&kp N0>, <&kp ASTRK>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    td_kp_tab: tap_dance_keypad_tab {
        compatible = "zmk,behavior-tap-dance";
        label = "td_keypad_tab";
        #binding-cells = <0>;
        tapping-term-ms = <TD_TERM>;
        bindings = <&keypad_tab>, <&kp TAB>;
    };

    td_kp_stab: tap_dance_keypad_stab {
        compatible = "zmk,behavior-tap-dance";
        label = "td_keypad_stab";
        #binding-cells = <0>;
        tapping-term-ms = <TD_TERM>;
        bindings = <&keypad_stab>, <&kp LS(TAB)>;
    };

    /* 0, 10, 22, 34, 46, 64, (80) */
    combos {
        compatible = "zmk,combos";
        // combo_space_enter {
        //     timeout-ms = <COMBO_TIME>;
        //     key-positions = <69 70>;
        //     bindings = <&mo LYLOW>;
        // };

        combo_caps {
            timeout-ms = <COMBO_TIME>;
            key-positions = <52 57>;
            bindings = <&kp CAPS>;
        };
    };

};

    /* Automatically generated keymap */
/ {
    keymap {
        compatible = "zmk,keymap";


        layer_Base {
            bindings = <
 &ht_kp LC(V) LC(C)  &kp LC(LS(TAB))  &ht_kp F5 LC(F)  &kp LC(W)  &kp LC(TAB)                                                                                                                                  &kp F6  &kp LC(T)  &kp F11  &kp PSCRN                 &kp DEL
          &kp GRAVE           &kp N1           &kp N2     &kp N3       &kp N4  &kp N5                                                                                                                &kp N6    &kp N7     &kp N8   &kp N9     &kp N0                &kp BSLH
          &kp EQUAL            &kp Q            &kp W      &kp F        &kp P   &kp B                                                                                                                 &kp J     &kp L      &kp U    &kp Y   &kp SEMI               &kp MINUS
            &capesc            &kp A            &kp R      &kp S        &kp T   &kp G                                                                                                                 &kp M     &kp N      &kp E    &kp I      &kp O                 &kp SQT
           &kp LBKT            &kp Z            &kp X      &kp C        &kp D   &kp V  &kp LSHFT           &kp LCTRL  &kp LGUI  &ht_skq RGUI RS(RGUI)  &ht_skq RCTRL RS(RCTRL)  &ht_skq RSHFT RSHFT   &kp K     &kp H  &kp COMMA  &kp DOT   &kp FSLH                &kp RBKT
     &magic LYMAG 0      &kp LS(TAB)         &kp LEFT  &kp RIGHT      &kp TAB          &kp SPACE  &ht_mo LYLOW ENTER  &kp LALT  &ht_skq RALT RS(RALT)       &ht_mo LYLOW ENTER             &kp BSPC          &kp LEFT   &kp DOWN   &kp UP  &kp RIGHT  &ht_mo_tog LYLYR LYPAD
            >;
        };

        layer_Gaming {
            bindings = <
 &kp ESC     &kp F1  &kp F2  &kp F3  &kp F4                                                                      &kp F6  &kp F7  &kp F8    &kp F9    &kp F10
  &trans     &trans  &trans  &trans  &trans  &trans                                                      &trans  &trans  &trans  &trans    &trans    &kp F11
   &kp T    &kp TAB   &kp Q   &kp W   &kp E   &kp R                                                       &kp Y   &kp U   &kp I   &kp O     &kp P    &kp F12
   &kp G  &kp LSHFT   &kp A   &kp S   &kp D   &kp F                                                       &kp H   &kp J   &kp K   &kp L  &kp SEMI  &kp MINUS
   &kp B  &kp LCTRL   &kp Z   &kp X   &kp C   &kp V  &trans     &trans  &trans  &trans   &trans  &trans   &kp N   &kp M  &trans  &trans    &trans   &kp PLUS
  &trans     &trans   &none   &none   &none          &trans  &mo LYLOW  &trans  &trans  &kp RET  &trans          &trans  &trans  &trans    &trans     &trans
            >;
        };

        layer_Keypad {
            bindings = <
       &none         &none      &none      &none        &none                                                                                         &none     &none     &none     &none    &none
       &none      &kp EXCL     &kp AT   &kp HASH     &kp DLLR  &kp PRCNT                                                                &kp CARET  &kp AMPS  &kp STAR  &kp LPAR  &kp RPAR    &none
       &none         &none      &none      &none        &none      &none                                                                &kp SPACE    &kp N7    &kp N8    &kp N9    &kp N0  &kp DOT
 &keypad_esc      &kp STAR  &kp EQUAL  &kp UNDER    &kp MINUS      &none                                                                &kp SPACE    &kp N4    &kp N5    &kp N6    &kp N0  &kp DOT
       &none      &kp FSLH    &kp DOT  &kp COMMA     &kp PLUS      &none         &trans         &trans  &trans  &trans  &trans  &trans  &kp SPACE    &kp N1    &kp N2    &kp N3    &kp N0  &kp DOT
      &trans  &keypad_stab     &trans     &trans  &keypad_tab             &keypad_space  &keypad_enter  &trans  &trans  &trans  &trans               &trans    &trans    &trans    &trans   &trans
            >;
        };

        layer_Lower {
            bindings = <
 &kp F1       &kp F2       &kp F3       &kp F4       &kp F5                                                                                &kp F6        &kp F7        &kp F8         &kp F9  &kp F10
  &none     &kp C_RW   &kp C_PREV     &kp C_PP   &kp C_NEXT     &kp C_FF                                                   &kp K_BACK  &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP  &kp K_FORWARD  &kp F11
  &none     &kp EXCL       &kp AT     &kp HASH     &kp DLLR    &kp PRCNT                                                    &kp CARET    &kp AMPS    &fast_lbrc    &fast_rbrc      &kp COLON  &kp F12
 &trans     &kp STAR  &fast_equal  &fast_under  &fast_minus       &kp N0                                                       &kp N1  &fast_bslh    &fast_lpar    &fast_rpar      &fast_dqt  &kp DQT
  &none  &fast_tilde   &fast_lbkt   &fast_rbkt   &fast_plus  &fast_grave  &trans  &trans  &trans  &trans  &trans   &trans       &none  &fast_pipe        &kp LT        &kp GT      &kp QMARK    &none
 &trans     &kp LEFT       &kp UP     &kp DOWN    &kp RIGHT               &trans  &trans  &trans  &trans  &trans  &kp DEL                &kp HOME     &kp PG_DN     &kp PG_UP        &kp END  &kp INS
            >;
        };

        layer_Layer {
            bindings = <
  &none   &none   &none   &none   &none                                                                   &none   &none   &none   &none   &none
  &none   &none   &none   &none   &none   &none                                                   &none   &none   &none   &none   &none   &none
  &none   &none   &none   &none   &none   &none                                                   &none   &none   &none   &none   &none   &none
  &none   &none   &none   &none   &none   &none                                                   &none   &none   &none   &none   &none   &none
  &none   &none   &none   &none   &none   &none   &none   &none   &none   &none   &none  &tog 2   &none   &none   &none   &none   &none   &none
  &none   &none   &none   &none   &none           &none   &none   &none   &none   &to 1   &to 0           &none   &none   &none   &none   &none
            >;
        };

        layer_Magic {
            bindings = <
  &bt BT_CLR            &none            &none            &none            &none                                                                                  &none   &none   &none   &none  &bt BT_CLR_ALL
       &to 0            &to 1            &to 2            &to 3            &to 4            &none                                                         &none   &none   &none   &none   &none           &none
       &none  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                         &none   &none   &none   &none   &none           &none
 &bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                         &none   &none   &none   &none   &none     &bootloader
      &reset            &none            &none            &none            &none            &none   &bt_2   &bt_3         &none   &none   &none   &none   &none   &none   &none   &none   &none          &reset
       &none            &none            &none            &none            &none                    &bt_0   &bt_1  &out OUT_USB   &none   &none   &none           &none   &none   &none   &none           &none
            >;
        };

    };
};
